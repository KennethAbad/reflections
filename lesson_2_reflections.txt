What happens when you initialize a repository? Why do you need to do it?

When initializing a repository, you create a .git folder. No commits are made, but you can now make commits to the project.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is where files are added before making a commit. It offers insight on the files you've added before you actually create a commit.

How can you use the staging area to make sure you have one commit per logical
change?

You can use the command "git diff" to compare changes made from the working directory to the staging area. Also, you can use the command "git diff --staged" to compare the changes made from the staging area to the most recent commit on the repository.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches are useful when experimenting certain feautures that you don't want to affect the master branch. Another use may be for different languages.

How do the diagrams help you visualize the branch structure?

It helps you keep track of the branches you create and their reachability.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The two branches combine into one. Their commits are combined by the order of date.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

Automatic merging is useful because it is convenient, however merging conflicts can occur. This is where merging manually comes in.
